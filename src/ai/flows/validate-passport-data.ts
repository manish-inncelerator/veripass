// This is an autogenerated file from Firebase Studio.
'use server';
/**
 * @fileOverview Passport data validation flow.
 *
 * This flow uses AI to validate extracted passport data against known formats and security features.
 *
 * - validatePassportData - Function to validate passport data.
 * - ValidatePassportDataInput - Input type for the validatePassportData function.
 * - ValidatePassportDataOutput - Return type for the validatePassportData function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const ValidatePassportDataInputSchema = z.object({
  fullName: z.string().describe('The full name of the passport holder.'),
  passportNumber: z.string().describe('The passport number.'),
  dateOfBirth: z.string().describe('The date of birth of the passport holder.'),
  expiryDate: z.string().describe('The expiry date of the passport.'),
  issuingCountry: z.string().describe('The issuing country of the passport.'),
  photoUrl: z.string().describe('The URL of the passport photo.'),
});
export type ValidatePassportDataInput = z.infer<typeof ValidatePassportDataInputSchema>;

const ValidationResultSchema = z.object({
  isValid: z.boolean().describe('Whether the field is valid or not.'),
  isSuspicious: z.boolean().describe('Whether the field is suspicious or not.'),
  reason: z.string().optional().describe('The reason for being invalid or suspicious.'),
});

const ValidatePassportDataOutputSchema = z.object({
  fullName: ValidationResultSchema.describe('Validation result for the full name.'),
  passportNumber: ValidationResultSchema.describe('Validation result for the passport number.'),
  dateOfBirth: ValidationResultSchema.describe('Validation result for the date of birth.'),
  expiryDate: ValidationResultSchema.describe('Validation result for the expiry date.'),
  issuingCountry: ValidationResultSchema.describe('Validation result for the issuing country.'),
  overallValidity: z.boolean().describe('Overall validity of the passport based on all fields.'),
});
export type ValidatePassportDataOutput = z.infer<typeof ValidatePassportDataOutputSchema>;

export async function validatePassportData(input: ValidatePassportDataInput): Promise<ValidatePassportDataOutput> {
  return validatePassportDataFlow(input);
}

const assessFieldValidity = ai.defineTool({
  name: 'assessFieldValidity',
  description: 'Assess the validity and potential suspicion of a given passport field.',
  inputSchema: z.object({
    fieldName: z.string().describe('The name of the passport field being validated.'),
    fieldValue: z.string().describe('The value of the passport field.'),
  }),
  outputSchema: z.object({
    isValid: z.boolean().describe('Whether the field is valid according to known passport formats and rules.'),
    isSuspicious: z.boolean().describe('Whether the field is suspicious and requires further review.'),
    reason: z.string().optional().describe('The reasoning behind the validity assessment, especially if invalid or suspicious.'),
  }),
},
async input => {
    // Placeholder implementation: replace with actual validation logic
    // In a real application, this tool would perform checks against passport formats,
    // known fraud patterns, and potentially external databases.
    if (input.fieldName === 'passportNumber' && input.fieldValue.length !== 9) {
      return {
        isValid: false,
        isSuspicious: true,
        reason: 'Passport number should be 9 characters long.',
      };
    }
    return {
      isValid: true,
      isSuspicious: false,
      reason: 'No issues found.',
    };
  }
);

const validatePassportDataPrompt = ai.definePrompt({
  name: 'validatePassportDataPrompt',
  input: {
    schema: ValidatePassportDataInputSchema,
  },
  output: {
    schema: ValidatePassportDataOutputSchema,
  },
  tools: [assessFieldValidity],
  prompt: `You are an AI assistant specialized in validating passport data.
  Given the following information extracted from a passport, determine the validity of each field and the overall validity of the passport.
  Use the assessFieldValidity tool to assess the validity of each field.

  Full Name: {{{fullName}}}
  Passport Number: {{{passportNumber}}}
  Date of Birth: {{{dateOfBirth}}}
  Expiry Date: {{{expiryDate}}}
  Issuing Country: {{{issuingCountry}}}
  Passport Photo: {{media url=photoUrl}}

  Based on the assessment of each field, determine the overall validity of the passport.
  Return a JSON object containing the validation results for each field and the overall validity.
`,
});

const validatePassportDataFlow = ai.defineFlow<
  typeof ValidatePassportDataInputSchema,
  typeof ValidatePassportDataOutputSchema
>({
  name: 'validatePassportDataFlow',
  inputSchema: ValidatePassportDataInputSchema,
  outputSchema: ValidatePassportDataOutputSchema,
},
async input => {
  const fullNameResult = await assessFieldValidity({
    fieldName: 'fullName',
    fieldValue: input.fullName,
  });

  const passportNumberResult = await assessFieldValidity({
    fieldName: 'passportNumber',
    fieldValue: input.passportNumber,
  });

  const dateOfBirthResult = await assessFieldValidity({
    fieldName: 'dateOfBirth',
    fieldValue: input.dateOfBirth,
  });

  const expiryDateResult = await assessFieldValidity({
    fieldName: 'expiryDate',
    fieldValue: input.expiryDate,
  });

  const issuingCountryResult = await assessFieldValidity({
    fieldName: 'issuingCountry',
    fieldValue: input.issuingCountry,
  });

  const overallValidity = fullNameResult.isValid && passportNumberResult.isValid && dateOfBirthResult.isValid && expiryDateResult.isValid && issuingCountryResult.isValid;

  return {
    fullName: {
      isValid: fullNameResult.isValid,
      isSuspicious: fullNameResult.isSuspicious,
      reason: fullNameResult.reason,
    },
    passportNumber: {
      isValid: passportNumberResult.isValid,
      isSuspicious: passportNumberResult.isSuspicious,
      reason: passportNumberResult.reason,
    },
    dateOfBirth: {
      isValid: dateOfBirthResult.isValid,
      isSuspicious: dateOfBirthResult.isSuspicious,
      reason: dateOfBirthResult.reason,
    },
    expiryDate: {
      isValid: expiryDateResult.isValid,
      isSuspicious: expiryDateResult.isSuspicious,
      reason: expiryDateResult.reason,
    },
    issuingCountry: {
      isValid: issuingCountryResult.isValid,
      isSuspicious: issuingCountryResult.isSuspicious,
      reason: issuingCountryResult.reason,
    },
    overallValidity,
  };
});

